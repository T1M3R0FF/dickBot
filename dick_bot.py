import telebot
import random
import time
import statistics
import schedule
from telebot import types
from threading import Thread

bot = telebot.TeleBot('5706224983:AAFvcDUZGtn1_Fa4O7RU6AdBrynZcOsCAQc')

dicks = ['–¢–≤–æ—è –¥–∏–ª–¥–æ—Å–∏–Ω–∞', '–¢–≤–æ—è –µ–ª–¥–∞', '–¢–≤–æ–π –ø–µ–Ω–∏—Å', '–¢–≤–æ–π —Ö–µ—Ä',
         '–¢–≤–æ—è –∑–∞–ª—É–ø–∞', '–¢–≤–æ–π —Ö—É–π', '–¢–≤–æ—è —à–∏—à–∫–∞', '–¢–≤–æ–π –Ω–∞–≥–∏–±–∞—Ç–µ–ª—å',
         '–¢–≤–æ–π —ç–∫—Å–∫–∞–ª–∏–±—É—Ä', '–¢–≤–æ—è –ø–∞–ª–æ—á–∫–∞', '–¢–≤–æ–π –ª—ã—Å—ã–π –î–∂–æ–Ω–Ω–∏ –°–∏–Ω—Å',
         '–¢–≤–æ—è —Å–∏–≥–∞—Ä–∞', '–¢–≤–æ–π –ø–∏—Ç–æ–Ω', '–¢–≤–æ–π –ø–∏—Å—é–Ω', '–¢–≤–æ–π –∑–≤–µ—Ä—å',
         '–¢–≤–æ–π —á–ª–µ–Ω', '–¢–≤–æ–π —Ö–æ–±–æ—Ç–æ–∫', '–¢–≤–æ–π –º–∞–ª–µ–Ω—å–∫–∏–π –¥—Ä—É–≥']
emojis = [' üòè', ' üò±', ' üòÅ', ' üòØ', ' ü•∞', ' ü§©', ' üò≥', ' üò®', ' üòà', ' üçå', ' üåΩ', ' üçÜ']

temp_set = []  # –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ plus() –∏ minus()
users = {}
users_time = {}
users_bonus = {}
users_scale = {}
gays = {}
gays_time = {}
average_dicks = {}
gayresist_d = {}
check_battle = {}
battle_time = 0
chat_id = 0
resist_time = 0


@bot.message_handler(commands=['help'])
def manual(message):
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton('–°–∫—Ä—ã—Ç—å', callback_data='hide')
    markup.add(button1)
    bot.reply_to(message, '–ó–¥–∞—Ä–æ–≤–∞, –ø—Ä–æ–±–µ–∂–∏–º—Å—è –ø–æ –∫–æ–º–∞–Ω–¥–∞–º.\n'
                          '–ß–µ—Ä–µ–∑ /start —Ç—ã –∑–∞—Ö–æ–¥–∏—à—å –≤ –±–æ—Ç–∞ –∏ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –∫–æ–º–∞–Ω–¥—ã. /measure, –∫–∞–∫ –∏ /gay'
                          ' –ø—Ä–æ—Å—Ç–æ –∏–∑–º–µ—Ä—è—é—Ç —á–ª–µ–Ω –∏ –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã –≥–µ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ(–∏–∑–º–µ—Ä—è—Ç—å –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏,'
                          ' –µ—Å–ª–∏ —Å—É—Ç–∫–∏ –Ω–µ –ø—Ä–æ—à–ª–∏, –≤—ã—Å–≤–µ—Ç–∏—Ç—Å—è —Ç–æ –∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ), —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –º–æ–∂–Ω–æ —É—Å—Ä–µ–¥–Ω–∏—Ç—å —á–µ—Ä–µ–∑'
                          ' /average –∏ /gayaverage, –Ω–æ /average –≤—ã—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫. –ö–∞–∂–¥—ã–π —Ä–∞–∑, '
                          '–¥–µ–ª–∞—è –Ω–æ–≤—ã–π –∑–∞–º–µ—Ä —á–ª–µ–Ω–∞, —Ç–µ–±–µ –ø–∞–¥–∞–µ—Ç –Ω–∞ –±–æ–Ω—É—Å–Ω—ã–π —Å—á–µ—Ç(/balance) 10% –æ—Ç —Ä–∞–∑–º–µ—Ä–∞. –≠—Ç–∏ –±–æ–Ω—É—Å—ã'
                          ' –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏: –ª–∏–±–æ –ø—Ä–∏–±–∞–≤–∏—Ç—å –∫–æ–º—É —Ç–æ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ã –∫ –°–†–ï–î–ù–ï–ú–£ –∑–Ω–∞—á–µ–Ω–∏—é'
                          '(/plus), –ª–∏–±–æ —É–±–∞–≤–∏—Ç—å(/minus), –≤ —Ç–æ–º —á–∏—Å–ª–µ –∏ —Å–µ–±–µ. –¢–æ —á–∏—Å–ª–æ, —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –Ω–∞–∫–∏–Ω—É–ª–∏ –≤ —Å—É–º–º–µ,'
                          ' –±—É–¥–µ—Ç –∫–∞–∂–¥—ã–π —Ä–∞–∑ –≤—ã—á–∏—Ç–∞—Ç—å—Å—è –∏–ª–∏ –ø—Ä–∏–±–∞–≤–ª—è—Ç—å—Å—è –∫ —Å—Ä–µ–¥–Ω–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é. –ü—Ä–∏–º–µ—Ä: –ø–æ –∏—Ç–æ–≥—É 3-—Ö –¥–Ω–µ–π'
                          ' —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É —Ç–µ–±—è 50 —Å–º, –Ω–æ —Ç–µ–±–µ –≤ —Å—É–º–º–µ –Ω–∞–∫–∏–Ω—É–ª–∏ –Ω–∞ -15(–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ'
                          ' –Ω–∞–∫–∏–Ω—É–ª–∏ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ /scale). –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —Å—Ä–µ–¥–Ω–µ–µ —É —Ç–µ–±—è —Å—á–∏—Ç–∞–µ—Ç—Å—è –∫–∞–∫ 50-15=35 —Å–º. –ù–∞'
                          ' —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å —Ç—ã —Å–¥–µ–ª–∞–ª –∑–∞–º–µ—Ä, –∏ —Å—Ä–µ–¥–Ω–µ–µ —É —Ç–µ–±—è —Å—Ç–∞–ª–æ 60 —Å–º, –Ω–æ –≤ scale –¥–æ —Å–∏—Ö –ø–æ—Ä -15,'
                          ' –ø–æ—ç—Ç–æ–º—É —Å—Ä–µ–¥–Ω–µ–µ –±—É–¥–µ—Ç 60-15=45 —Å–º. –ö–∞–∂–µ—Ç—Å—è, –≤—Å—ë.\n'
                          ' /all –∑–∞–º–µ—Ä—è–µ—Ç —Å—Ä–∞–∑—É —É –≤—Å–µ—Ö, –∫—Ç–æ –ø—Ä–æ–∂–∞–ª —Å—Ç–∞—Ä—Ç, /getout - –≤—ã—Ö–æ–¥ –∏–∑ –±–æ—Ç–∞. –í–µ—Å–µ–ª–∏—Ç–µ—Å—å!',
                 reply_markup=markup)


@bot.message_handler(commands=['start'])
def start(message):
    global chat_id
    chat_id = message.chat.id
    if message.from_user.username in users:
        bot.reply_to(message, "–¢—ã —É–∂–µ –≤ –∫–ª—É–±–µ", parse_mode=None)
        return True
    users.update({message.from_user.username: []})
    gays.update({message.from_user.username: []})
    users_bonus.update({message.from_user.username: 0})
    users_scale.update({message.from_user.username: 0})
    gayresist_d.update({message.from_user.username: {}})
    bot.send_message(message.chat.id, 'Welcome to the club, buddy!')


@bot.message_handler(commands=['measure'])
def measure(message):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É—Ä–∞–∫–∞
    if message.from_user.username not in users:
        bot.send_message(message.chat.id, '–¢—ã –ø–æ–∫–∞ –Ω–µ –≤ –∫–ª—É–±–µ, –∂–º–∏ /start')
        return True
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏
    # –µ—Å–ª–∏ —é–∑–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å—É—Ç–∫–∏ –Ω–µ –ø—Ä–æ—à–ª–∏
    if len(users_time) != 0 and len(users[message.from_user.username]) != 0 \
            and time.perf_counter() - users_time[message.from_user.username] < 86400:
        bot.reply_to(message, f'{random.choice(dicks)} —Å–µ–≥–æ–¥–Ω—è'
                              f' <b>{users[message.from_user.username][-1]}—Å–º</b>'
                              f'{random.choice(emojis)}', parse_mode='html')
        return True
    # –µ—Å–ª–∏ –Ω–æ–≤—ã–π —é–∑–µ—Ä, —Ç–æ –¥–∞—Ç—å –∑–∞–º–µ—Ä–∏—Ç—å –ª–∏–±–æ —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏
    elif message.from_user.username not in users_time or (
            len(users_time) != 0 and time.perf_counter() -
            users_time[message.from_user.username] >= 86400):

        size = random.randint(0, 200)
        users_time.update({message.from_user.username: time.perf_counter()})
        users[message.from_user.username].append(size)
        average_dicks.update({message.from_user.username: statistics.mean(users[message.from_user.username])})
        users_bonus[message.from_user.username] += size // 10
        bot.reply_to(message, f'{random.choice(dicks)} —Å–µ–≥–æ–¥–Ω—è <b>{users[message.from_user.username][-1]}—Å–º</b>'
                              f'{random.choice(emojis)}', parse_mode='html')


@bot.message_handler(commands=['average'])
def average(message):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É—Ä–∞–∫–∞
    if message.from_user.username not in users:
        bot.send_message(message.chat.id, '–¢—ã –ø–æ–∫–∞ –Ω–µ –≤ –∫–ª—É–±–µ, –∂–º–∏ /start')
        return True
    total = '–£—Å—Ä–µ–¥–Ω—ë–Ω–Ω—ã–µ –∂–µ–∑–ª—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å:\n'
    if len(users) != 0:
        # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—ã–≤–æ–¥–∏–º–æ–π —Å—Ç—Ä–æ–∫–∏
        sorted_users = dict(reversed(sorted(average_dicks.items(), key=lambda item: item[1])))
        # —É–ø–∞–∫–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —é–∑–µ—Ä—É
        for key, value in sorted_users.items():
            total += f'@{str(key)}:  <b>{str(value + users_scale[key])} —Å–º</b>\n'
        bot.send_message(message.chat.id, total, parse_mode='html')
    else:
        bot.send_message(message.chat.id, '–ö–ª—É–± –≤—Å–µ –µ—â–µ –ø—É—Å—Ç, –∑–∞—Ö–æ–¥–∏ /start')


# –∑–∞–º–µ—Ä —É –≤—Å–µ—Ö —Å—Ä–∞–∑—É
@bot.message_handler(commands=['all'])
def all_in(message):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É—Ä–∞–∫–∞
    if message.from_user.username not in users:
        bot.send_message(message.chat.id, '–¢—ã –ø–æ–∫–∞ –Ω–µ –≤ –∫–ª—É–±–µ, –∂–º–∏ /start')
        return True

    if len(users) == 0:
        bot.send_message(message.chat.id, '–ö–ª—É–± –æ–ø—É—Å—Ç–µ–ª:(\n–ó–∞—Ö–æ–¥–∏, —Å—Ç–∞–Ω—å –ø–µ—Ä–≤—ã–º /start')
        return True
    else:
        everyone = '–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ:\n'
        all_dict = {}
        for user in users.keys():
            # –ø—Ä–æ—à–ª–∏ —Å—É—Ç–∫–∏ –∏–ª–∏ –Ω–æ–≤—ã–π —é–∑–µ—Ä-–≥–µ–Ω–µ—Ä–∏–º
            if user not in users_time or (user in users_time and time.perf_counter() - users_time[user] >= 86400):
                size = random.randint(0, 200)
                users_time.update({user: time.perf_counter()})
                users[user].append(size)
                average_dicks.update({user: statistics.mean(users[user])})
                users_bonus[message.from_user.username] += size // 10
                all_dict.update({user: size})
                # –ø–æ–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                everyone += f'@{str(user)}:  <b>{str(size)} —Å–º</b>\n'

                # –Ω–∞–æ–±–æ—Ä–æ—Ç
            elif user in users_time and len(users[user]) != 0 and time.perf_counter() - users_time[user] < 86400:
                all_dict.update({user: users[user][-1]})
                # –ø–æ–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                everyone += f'@{str(user)}:  <b>{str(users[user][-1])} —Å–º</b>\n'
        # –≤—ã–≤–æ–¥
        bot.send_message(message.chat.id, everyone, parse_mode='html')


# –≥–µ–π–º–µ—Ç—Ä
@bot.message_handler(commands=['gay'])
def gay(message):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É—Ä–∞–∫–∞
    if message.from_user.username not in users:
        bot.send_message(message.chat.id, '–¢—ã –ø–æ–∫–∞ –Ω–µ –≤ –∫–ª—É–±–µ, –∂–º–∏ /start')
        return True

    if len(gays_time) != 0 and len(gays[message.from_user.username]) != 0 \
            and time.perf_counter() - gays_time[message.from_user.username] < 86400:
        bot.reply_to(message, f'@{message.from_user.username} —Å–µ–≥–æ–¥–Ω—è –≥–µ–π –Ω–∞'
                              f' <b>{gays[message.from_user.username][-1]}%</b>', parse_mode='html')
        return True
    # –µ—Å–ª–∏ –Ω–æ–≤—ã–π —é–∑–µ—Ä –∏–ª–∏ –ø—Ä–æ—à–ª–∏ —Å—É—Ç–∫–∏, —Ç–æ –¥–∞—Ç—å –∑–∞–º–µ—Ä–∏—Ç—å
    elif message.from_user.username not in gays_time or (
            len(gays_time) != 0 and time.perf_counter() - gays_time[message.from_user.username] >= 86400):

        size = random.randint(0, 100)
        gays_time.update({message.from_user.username: time.perf_counter()})
        gays[message.from_user.username].append(size)
        bot.reply_to(message, f'@{message.from_user.username} —Å–µ–≥–æ–¥–Ω—è –≥–µ–π –Ω–∞'
                              f' <b>{gays[message.from_user.username][-1]}%</b>', parse_mode='html')


# —Å—Ä–µ–¥–Ω–∏–µ –≥–µ–∏
@bot.message_handler(commands=['gayaverage'])
def gayaverage(message):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É—Ä–∞–∫–∞
    if message.from_user.username not in users:
        bot.send_message(message.chat.id, '–¢—ã –ø–æ–∫–∞ –Ω–µ –≤ –∫–ª—É–±–µ, –∂–º–∏ /start')
        return True

    total = '–ü–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ –ª–∞—Ç–µ–Ω—Ç–Ω—ã—Ö –Ω–∞—à–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö:\n'
    if len(gays) != 0:
        # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—ã–≤–æ–¥–∏–º–æ–π —Å—Ç—Ä–æ–∫–∏
        sorted_gays = dict(reversed(sorted(gays.items(), key=lambda item: item[1])))
        # —É–ø–∞–∫–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —é–∑–µ—Ä—É
        for key, value in sorted_gays.items():
            total += f'@{str(key)}: <b>{str(statistics.mean(value))} %</b>\n'
        bot.send_message(message.chat.id, total, parse_mode='html')
    else:
        bot.send_message(message.chat.id, '–ö–ª—É–± –≤—Å–µ –µ—â–µ –ø—É—Å—Ç, –∑–∞—Ö–æ–¥–∏ /start')


# –≤—ã—Ö–æ–¥ –∏–∑ –±–æ—Ç–∞
@bot.message_handler(commands=['getout'])
def getout(message):
    if message.from_user.username not in users:
        bot.send_message(message.chat.id, '–¢—ã –∏ —Ç–∞–∫ –Ω–µ –≤ –∫–ª—É–±–µ, –≤—ã–π—Ç–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è')
        return True
    else:
        if message.from_user.username in users_time:
            del users_time[message.from_user.username]

        if message.from_user.username in gays_time:
            del gays_time[message.from_user.username]

        if message.from_user.username in average_dicks:
            del average_dicks[message.from_user.username]

        del gays[message.from_user.username]
        del users[message.from_user.username]
        del users_bonus[message.from_user.username]
        del users_scale[message.from_user.username]
        bot.send_message(message.chat.id, f'@{message.from_user.username} –∏–∑–≤–æ–ª–∏–ª –ø–æ–∫–∏–Ω—É—Ç—å –Ω–∞—à –∫–ª—É–±')


# –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
@bot.message_handler(commands=['balance'])
def balance(message):
    if message.from_user.username not in users:
        bot.send_message(message.chat.id, '–¢—ã –ø–æ–∫–∞ –Ω–µ –≤ –∫–ª—É–±–µ, –∂–º–∏ /start')
        return True
    bot.reply_to(message, f'–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{users_bonus[message.from_user.username]} –æ—á–∫–æ–≤</b>',
                 parse_mode='html')


# –ø—Ä–∏–±–∞–≤–∏—Ç—å –∫–æ–º—É-—Ç–æ —Å–º –∫ —Å—Ä–µ–¥–Ω–µ–º—É
@bot.message_handler(commands=['plus'])
def plus(message):
    name = message.from_user.username
    if name not in users:
        bot.send_message(message.chat.id, '–¢—ã –ø–æ–∫–∞ –Ω–µ –≤ –∫–ª—É–±–µ, –∂–º–∏ /start')
        return True
    if len(temp_set) != 0:
        msg = bot.send_message(message.chat.id, f'–ü–æ–¥–æ–∂–¥–∏, –ø–æ–∫–∞ {temp_set[0]} –∑–∞–≤–µ—Ä—à–∏—Ç –æ–ø–µ—Ä–∞—Ü–∏—é')
        bot.register_next_step_handler(msg, add)
    else:
        temp_set.append(name)
        msg1 = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏ —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª - –∫–æ–º—É –∏ —Å–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫–∏–Ω—É—Ç—å.'
                                                 '(Jimmythedoc 10)\n'
                                                 '–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel')
        bot.register_next_step_handler(msg1, add)


def add(message):
    if message.from_user.username in temp_set:
        if message.text == '/cancel':
            bot.reply_to(message, '–ì–∞–ª—è, –æ—Ç–º–µ–Ω–∞!')
            temp_set.clear()
            return True
        text = message.text.split(' ')
        if len(text) != 2 or not text[-1].isdigit():
            bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ /plus')
            temp_set.clear()
            return True
        if len(text) == 2 and text[-1].isdigit():
            nickname = text[-2]
            inches = int(text[-1])
            if nickname not in users_bonus:
                mess0 = bot.send_message(message.chat.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {nickname} –µ—â–µ –Ω–µ –∫–ª—É–±–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
                bot.register_next_step_handler(mess0, add)
            elif inches <= users_bonus[message.from_user.username]:
                users_bonus[message.from_user.username] -= inches
                users_scale[nickname] += inches
                bot.send_message(message.chat.id, f'–£—Å–ø–µ—à–Ω–æ –Ω–∞–∫–∏–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>{nickname} {inches} —Å–º.</b>',
                                 parse_mode='html')
                temp_set.clear()
            elif inches > users_bonus[message.from_user.username]:
                bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –±–æ–Ω—É—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ')
                temp_set.clear()
                return True
        else:
            bot.register_next_step_handler(message, add)


# –æ—Ç–Ω—è—Ç—å —É –∫–æ–≥–æ-—Ç–æ —Å–º –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ
@bot.message_handler(commands=['minus'])
def minus(message):
    if message.from_user.username not in users:
        bot.send_message(message.chat.id, '–¢—ã –ø–æ–∫–∞ –Ω–µ –≤ –∫–ª—É–±–µ, –∂–º–∏ /start')
        return True
    if len(temp_set) != 0:
        msg = bot.send_message(message.chat.id, f'–ü–æ–¥–æ–∂–¥–∏, –ø–æ–∫–∞ {temp_set[0]} –∑–∞–≤–µ—Ä—à–∏—Ç –æ–ø–µ—Ä–∞—Ü–∏—é')
        bot.register_next_step_handler(msg, remove)
    if message.from_user.username in users:
        temp_set.append(message.from_user.username)
        message1 = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏ —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª - –∫–æ–º—É –∏ —Å–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ —É–±–∞–≤–∏—Ç—å.'
                                         '(Jimmythedoc 10)\n'
                                         '–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel')
        bot.register_next_step_handler(message1, remove)


def remove(message):
    global resist_time
    if message.from_user.username in temp_set:
        if message.text == '/cancel':
            bot.reply_to(message, '–ì–∞–ª—è, –æ—Ç–º–µ–Ω–∞!')
            temp_set.clear()
            return True
        text = message.text.split(' ')
        if len(text) != 2 or not text[-1].isdigit():
            bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ /minus')
            temp_set.clear()
            return True
        if len(text) == 2 and text[-1].isdigit():
            nickname = text[-2]
            inches = int(text[-1])
            if nickname not in users:
                mess = bot.send_message(message.chat.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {nickname} –µ—â–µ –Ω–µ –∫–ª—É–±–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
                bot.register_next_step_handler(mess, remove)
            elif inches <= users_bonus[message.from_user.username]:
                users_bonus[message.from_user.username] -= inches
                users_scale[nickname] -= inches
                bot.send_message(message.chat.id, f'–£—Å–ø–µ—à–Ω–æ —É–±–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>{nickname} {inches} —Å–º.</b>',
                                 parse_mode='html')
                resist_time = time.perf_counter()
                gayresist_d[nickname].setdefault(message.from_user.username, []).append(inches)
                temp_set.clear()
            elif inches > users_bonus[message.from_user.username]:
                bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –±–æ–Ω—É—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
                temp_set.clear()
                return True
        else:
            bot.register_next_step_handler(message, remove)


# —à–∫–∞–ª–∞ —Å–∫–æ–ª—å–∫–æ –Ω–∞–∫–∏–Ω—É–ª–∏
@bot.message_handler(commands=['scale'])
def scale(message):
    if message.from_user.username not in users:
        bot.send_message(message.chat.id, '–¢—ã –ø–æ–∫–∞ –Ω–µ –≤ –∫–ª—É–±–µ, –∂–º–∏ /start')
        return True
    if users_scale[message.from_user.username] > 0:
        bot.reply_to(message, f'–í–∞—à–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç average —Ä–∞–≤–Ω–æ <b>+{users_scale[message.from_user.username]} —Å–º</b>',
                     parse_mode='html')
    else:
        bot.reply_to(message, f'–í–∞—à–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç average —Ä–∞–≤–Ω–æ <b>{users_scale[message.from_user.username]} —Å–º</b>',
                     parse_mode='html')


@bot.message_handler(commands=['gayresist'])
def gayresist(message):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É—Ä–∞–∫–∞
    if message.from_user.username not in users:
        bot.send_message(message.chat.id, '–¢—ã –ø–æ–∫–∞ –Ω–µ –≤ –∫–ª—É–±–µ, –∂–º–∏ /start')
        return True
    global battle_time
    # —Å—É—Ç–∫–∏ –Ω–µ –ø—Ä–æ—à–ª–∏
    if message.from_user.username in check_battle and check_battle[message.from_user.username] - time.perf_counter() \
            < 86400:
        bot.reply_to(message, '–±–∞—Ç—Ç–ª–∏—Ç—å—Å—è –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏')
        del check_battle[message.from_user.username]
        return True
    elif message.from_user.username not in check_battle:
        battle_time = time.perf_counter()
        check_battle.update({message.from_user.username: battle_time})
    # —Å—É—Ç–∫–∏ –ø—Ä–æ—à–ª–∏
    elif message.from_user.username in check_battle and\
            check_battle[message.from_user.username] - time.perf_counter() >= 86400:
        del check_battle[message.from_user.username]
        battle_time = time.perf_counter()
        check_battle.update({message.from_user.username: battle_time})
    if resist_time - time.perf_counter() >= 86400:
        del gayresist_d[message.from_user.username]
        return True
    msg = '–°–µ–≥–æ–¥–Ω—è –≤–∞–º —É–±–∞–≤–∏–ª–∏:\n'
    for key, value in gayresist_d[message.from_user.username].items():
        msg += f'@{key}: <b>{sum(value)} —Å–º</b>\n'
    if message.from_user.username not in gays_time or (
            len(gays_time) != 0 and time.perf_counter() - gays_time[message.from_user.username] >= 86400):
        bot.send_message(message.chat.id, '–ö–∞–∂–µ—Ç—Å—è, –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –∂–º–∏ /gay –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è')
        del check_battle[message.from_user.username]
        return True
    if msg == '–°–µ–≥–æ–¥–Ω—è –≤–∞–º —É–±–∞–≤–∏–ª–∏:\n':
        bot.send_message(message.chat.id, '–ó–∞ —Å–µ–≥–æ–¥–Ω—è –≤–∞–º –Ω–∏–∫—Ç–æ –Ω–∏—Å–∫–æ–ª—å–∫–æ –Ω–µ —É–±–∞–≤–∏–ª')
        del check_battle[message.from_user.username]
        return True
    elif len(gays_time) != 0 and len(gays[message.from_user.username]) != 0 \
            and time.perf_counter() - gays_time[message.from_user.username] < 86400:
        markup = types.InlineKeyboardMarkup(row_width=2)
        button1 = types.InlineKeyboardButton('–†–∏—Å–∫–Ω—É—Ç—å', callback_data='risk')
        button2 = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel')
        markup.add(button1, button2)
        bot.reply_to(message, '–ó–∞–ø—É—Å–∫–∞—é –≥–µ–π—Ä–µ–∑–∏—Å—Ç...')
        time.sleep(1)
        bot.send_message(message.chat.id, msg, parse_mode='html')
        time.sleep(1)
        bot.send_message(message.chat.id, f'–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑–∏—Å—Ç–∞: {gays[message.from_user.username][-1]} %',
                         reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.message:
        if call.data == 'risk':
            msg = bot.reply_to(call.message, '–û–∫–µ–π, –≤–ø–∏—à–∏ —Å—é–¥–∞ –Ω–∏–∫, —Å –∫–µ–º –±—É–¥–µ—à—å –±–∞—Ç—Ç–ª–∏—Ç—å—Å—è')
            bot.register_next_step_handler(msg, battle)
        elif call.data == 'cancel':
            bot.send_message(call.message.chat.id, '–û—Ç–º–µ–Ω–∏–ª')
            return True
        elif call.data == 'hide':
            bot.delete_message(call.message.chat.id, call.message.message_id)


def battle(message):
    if message.text not in gayresist_d[message.from_user.username].keys():
        msg = bot.reply_to(message, '–¢–∞–∫–æ–≥–æ –Ω–∏–∫–∞ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑')
        bot.register_next_step_handler(msg, battle)
    else:
        if random.random() < gays[message.from_user.username][-1] / 100:
            bot.send_message(message.chat.id, f'–°—Ä–∞–±–æ—Ç–∞–ª–æ! –¢–æ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º –Ω–∞–∫–∏–Ω—É–ª {message.text},'
                                              f' –æ—Ç—Å–∫–æ—á–∏–ª–æ –æ—Ç —Ç–µ–±—è –∏ –ø–æ–ø–∞–ª–æ –≤ –Ω–µ–≥–æ')
            users_scale[message.text] -= sum(gayresist_d[message.from_user.username][message.text])
            users_scale[message.from_user.username] += sum(gayresist_d[message.from_user.username][message.text])
        else:
            bot.send_message(message.chat.id, '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å:(\n–í—Å–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É')


# —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –¥–∏–∫–ø–∏–∫
def dickpic():
    photo = open('C:/Users/Mio Welt/Documents/0.3%_chance.jpg', 'rb')
    if random.random() < 0.004:
        bot.send_message(chat_id, '–°–µ–≥–æ–¥–Ω—è –ø—Ä–æ—Å—Ç–æ –∞—Ö—É–µ—Ç—å, –∫–∞–∫–æ–π —Å—á–∞—Å—Ç–ª–∏–≤—ã–π –¥–µ–Ω—å!!!!!\n'
                                  '–®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –í–ª–∞—Å—Ç–µ–ª–∏–Ω–∞ –æ—á–µ–Ω—å, –æ—á–µ–Ω—å –º–∞–ª, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é!!!!')
        bot.send_photo(chat_id, photo)
        return True


def do_schedule():
    schedule.every().day.at('12:00').do(dickpic)
    while True:
        schedule.run_pending()
        time.sleep(1)


thread = Thread(target=do_schedule)
thread.start()
bot.polling(non_stop=True)
