import telebot
import random
import time
import statistics

bot = telebot.TeleBot('5706224983:AAFvcDUZGtn1_Fa4O7RU6AdBrynZcOsCAQc')

dicks = ['–¢–≤–æ—è –¥–∏–ª–¥–æ—Å–∏–Ω–∞', '–¢–≤–æ—è –µ–ª–¥–∞', '–¢–≤–æ–π –ø–µ–Ω–∏—Å', '–¢–≤–æ–π —Ö–µ—Ä',
         '–¢–≤–æ—è –∑–∞–ª—É–ø–∞', '–¢–≤–æ–π —Ö—É–π', '–¢–≤–æ—è —à–∏—à–∫–∞', '–¢–≤–æ–π –Ω–∞–≥–∏–±–∞—Ç–µ–ª—å',
         '–¢–≤–æ–π —ç—Å–∫–∞–ª–∏–±—É—Ä', '–¢–≤–æ—è –ø–∞–ª–æ—á–∫–∞', '–¢–≤–æ–π –ª—ã—Å—ã–π –î–∂–æ–Ω–Ω–∏ –°–∏–Ω—Å',
         '–¢–≤–æ—è —Å–∏–≥–∞—Ä–∞', '–¢–≤–æ–π –ø–∏—Ç–æ–Ω', '–¢–≤–æ–π –ø–∏—Å—é–Ω', '–¢–≤–æ–π –∑–≤–µ—Ä—å',
         '–¢–≤–æ–π —á–ª–µ–Ω', '–¢–≤–æ–π —Ö–æ–±–æ—Ç–æ–∫', '–¢–≤–æ–π –º–∞–ª–µ–Ω—å–∫–∏–π –¥—Ä—É–≥']
emojis = [' üòè', ' üò±', ' üòÅ', ' üòØ', ' ü•∞', ' ü§©', ' üò≥', ' üò®', ' üòà', ' üçå', ' üåΩ', ' üçÜ']

users = {}
users_time = {}


@bot.message_handler(commands=['start'])
def start(message):
    if message.from_user.username in users:
        bot.reply_to(message, "–¢—ã —É–∂–µ –≤ –∫–ª—É–±–µ")
        return True
    users.update({message.from_user.username: []})
    bot.send_message(message.chat.id, 'Welcome to the club, buddy!')


@bot.message_handler(commands=['measure'])
def measure(message):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É—Ä–∞–∫–∞
    if message.from_user.username not in users:
        bot.send_message(message.chat.id, '–¢—ã –ø–æ–∫–∞ –Ω–µ –≤ –∫–ª—É–±–µ, –∂–º–∏ /start')
        return True
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏
    if len(users_time) != 0 and len(users[message.from_user.username]) != 0 and time.perf_counter() - users_time[
        message.from_user.username] < 86400:
        bot.reply_to(message, f'{random.choice(dicks)} —Å–µ–≥–æ–¥–Ω—è <b>{users[message.from_user.username][-1]}—Å–º</b>'
                              f'{random.choice(emojis)}', parse_mode='html')
        return True

    elif message.from_user.username not in users_time or (
            len(users_time) != 0 and time.perf_counter() - users_time[message.from_user.username] >= 86400):

        size = random.randint(0, 200)
        users_time.update({message.from_user.username: time.perf_counter()})
        users[message.from_user.username].append(size)
        bot.reply_to(message, f'{random.choice(dicks)} —Å–µ–≥–æ–¥–Ω—è <b>{users[message.from_user.username][-1]}—Å–º</b>'
                              f'{random.choice(emojis)}', parse_mode='html')


@bot.message_handler(commands=['average'])
def average(message):
    total = '–£—Å—Ä–µ–¥–Ω—ë–Ω–Ω—ã–µ –∂–µ–∑–ª—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å:\n'
    if len(users) != 0:
        # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—ã–≤–æ–¥–∏–º–æ–π —Å—Ç—Ä–æ–∫–∏
        sorted_users = dict(reversed(sorted(users.items(), key=lambda item: item[1])))
        # —É–ø–∞–∫–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —é–∑–µ—Ä—É
        for key, value in sorted_users.items():
            total += f'@{str(key)}:  <b>{str(statistics.mean(value))} —Å–º</b>\n'
        bot.send_message(message.chat.id, total, parse_mode='html')


bot.polling(non_stop=True)
